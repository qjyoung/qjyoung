<html lang="en">
<head>
    <meta charSet="UTF-8">
    <title>原生json格式化及高亮</title>
    <meta name="description" content="json,格式化,高亮">
    <meta name="keywords" content="程序员阿诺,阿诺,倒计时,json,格式化,高亮">
    <style type="text/css">
        * {
            font-size: 20px;
        }

        body {
            padding: 30px;
        }

        button {
            margin-left: 10px;
        }

        div.ControlsRow, div.HeadersRow {
            font-family: Georgia;
        }

        div.Canvas {
            font-family: Lucida Console, Georgia;
            background-color: #ECECEC;
            color: #000000;
            border: solid 1px #CECECE;
            margin-top: 10px;
        }

        .ObjectBrace {
            color: #00AA00;
            font-weight: bold;
        }

        .ArrayBrace {
            color: #0033FF;
            font-weight: bold;
        }

        .PropertyName {
            color: #CC0000;
            font-weight: bold;
        }

        .String {
            color: #007777;
        }

        .Number {
            color: #AA00AA;
        }

        .Boolean {
            color: #0000FF;
        }

        .Function {
            color: #AA6633;
            text-decoration: italic;
        }

        .Null {
            color: #0000FF;
        }

        .Comma {
            color: #000000;
            font-weight: bold;
        }

        PRE.CodeContainer {
            margin-top: 0px;
            margin-bottom: 0px;
        }

        PRE.CodeContainer img {
            cursor: pointer;
            border: none;
            margin-bottom: -1px;
        }

        #CollapsibleViewDetail a {
            padding-left: 10px;
        }
        
        #ControlsRow {
            white-space: nowrap;
            font: Georgia;
        }

        #TabSizeHolder {
            padding-left: 10px;
            padding-right: 10px;
        }

        #HeaderSubTitle {
            margin-bottom: 2px;
            margin-top: 0px
        }

        #RawJson {
            width: 99%;
            height: 120px;
            resize: vertical;
        }

        A.OtherToolsLink {
            color: #555;
            text-decoration: none;
        }

        A.OtherToolsLink:hover {
            text-decoration: underline;
        }
    </style>
    <script src="../x.js"></script>
    <script type="text/javascript">
      window.SINGLE_TAB = "  ";
      window.ImgCollapsed = "Collapsed.gif";
      window.ImgExpanded = "Expanded.gif";
      window.QuoteKeys = true;
      window._dateObj = new Date();
      window._regexpObj = new RegExp();

      function $id(id) {
        return document.getElementById(id);
      }

      function IsArray(obj) {
        return obj &&
          typeof obj === 'object' &&
          typeof obj.length === 'number' &&
          !(obj.propertyIsEnumerable('length'));
      }

      function Process() {
        SetTab();
        window.IsCollapsible = $id("CollapsibleView").checked;
        let json = $id("RawJson").value;
        let html = "";
        try {
          if (json === "") json = "\"\"";
          let obj = eval("[" + json + "]");
          html = ProcessObject(obj[0], 0, false, false, false);
          $id("Canvas").innerHTML = "<PRE class='CodeContainer'>" + html + "</PRE>";
        } catch (e) {
          alert("JSON数据格式不正确:\n" + e.message);
          $id("Canvas").innerHTML = "";
        }
      }

      function ProcessObject(obj, indent, addComma, isArray, isPropertyContent) {
        let html = "";
        let comma = (addComma) ? "<span class='Comma'>,</span> " : "";
        let type = typeof obj;
        let clpsHtml = "";
        if (IsArray(obj)) {
          if (obj.length === 0) {
            html += GetRow(indent, "<span class='ArrayBrace'>[ ]</span>" + comma, isPropertyContent);
          } else {
            clpsHtml = window.IsCollapsible ? "<span><img src=\"" + window.ImgExpanded + "\" onClick=\"ExpImgClicked(this)\" /></span><span class='collapsible'>" : "";
            html += GetRow(indent, "<span class='ArrayBrace'>[</span>" + clpsHtml, isPropertyContent);
            for (let i = 0; i < obj.length; i++) {
              html += ProcessObject(obj[i], indent + 1, i < (obj.length - 1), true, false);
            }
            clpsHtml = window.IsCollapsible ? "</span>" : "";
            html += GetRow(indent, clpsHtml + "<span class='ArrayBrace'>]</span>" + comma);
          }
        } else if (type === 'object') {
          if (obj === null) {
            html += FormatLiteral("null", "", comma, indent, isArray, "Null");
          } else if (obj.constructor === window._dateObj.constructor) {
            html += FormatLiteral("new Date(" + obj.getTime() + ") /*" + obj.toLocaleString() + "*/", "", comma, indent, isArray, "Date");
          } else if (obj.constructor === window._regexpObj.constructor) {
            html += FormatLiteral("new RegExp(" + obj + ")", "", comma, indent, isArray, "RegExp");
          } else {
            let numProps = 0;
            for (let prop in obj) numProps++;
            if (numProps === 0) {
              html += GetRow(indent, "<span class='ObjectBrace'>{ }</span>" + comma, isPropertyContent);
            } else {
              clpsHtml = window.IsCollapsible ? "<span><img src=\"" + window.ImgExpanded + "\" onClick=\"ExpImgClicked(this)\" /></span><span class='collapsible'>" : "";
              html += GetRow(indent, "<span class='ObjectBrace'>{</span>" + clpsHtml, isPropertyContent);
              let j = 0;
              for (let prop in obj) {
                let quote = window.QuoteKeys ? "\"" : "";
                html += GetRow(indent + 1, "<span class='PropertyName'>" + quote + prop + quote + "</span>: " + ProcessObject(obj[prop], indent + 1, ++j < numProps, false, true));
              }
              clpsHtml = window.IsCollapsible ? "</span>" : "";
              html += GetRow(indent, clpsHtml + "<span class='ObjectBrace'>}</span>" + comma);
            }
          }
        } else if (type === 'number') {
          html += FormatLiteral(obj, "", comma, indent, isArray, "Number");
        } else if (type === 'boolean') {
          html += FormatLiteral(obj, "", comma, indent, isArray, "Boolean");
        } else if (type === 'function') {
          if (obj.constructor === window._regexpObj.constructor) {
            html += FormatLiteral("new RegExp(" + obj + ")", "", comma, indent, isArray, "RegExp");
          } else {
            obj = FormatFunction(indent, obj);
            html += FormatLiteral(obj, "", comma, indent, isArray, "Function");
          }
        } else if (type === 'undefined') {
          html += FormatLiteral("undefined", "", comma, indent, isArray, "Null");
        } else {
          html += FormatLiteral(obj.toString().split("\\").join("\\\\").split('"').join('\\"'), "\"", comma, indent, isArray, "String");
        }
        return html;
      }

      function FormatLiteral(literal, quote, comma, indent, isArray, style) {
        if (typeof literal === 'string')
          literal = literal.split("<").join("&lt;").split(">").join("&gt;");
        let str = "<span class='" + style + "'>" + quote + literal + quote + comma + "</span>";
        if (isArray) str = GetRow(indent, str);
        return str;
      }

      function FormatFunction(indent, obj) {
        let tabs = "";
        for (let i = 0; i < indent; i++) tabs += window.TAB;
        let funcStrArray = obj.toString().split("\n");
        let str = "";
        for (let i = 0; i < funcStrArray.length; i++) {
          str += ((i === 0) ? "" : tabs) + funcStrArray[i] + "\n";
        }
        return str;
      }

      function GetRow(indent, data, isPropertyContent) {
        let tabs = "";
        for (let i = 0; i < indent && !isPropertyContent; i++) tabs += window.TAB;
        if (data != null && data.length > 0 && data.charAt(data.length - 1) != "\n")
          data = data + "\n";
        return tabs + data;
      }

      function CollapsibleViewClicked() {
        $id("CollapsibleViewDetail").style.visibility = $id("CollapsibleView").checked ? "visible" : "hidden";
        Process();
      }

      function QuoteKeysClicked() {
        window.QuoteKeys = $id("QuoteKeys").checked;
        Process();
      }

      function CollapseAllClicked() {
        EnsureIsPopulated();
        TraverseChildren($id("Canvas"), function (element) {
          if (element.className === 'collapsible') {
            MakeContentVisible(element, false);
          }
        }, 0);
      }

      function ExpandAllClicked() {
        EnsureIsPopulated();
        TraverseChildren($id("Canvas"), function (element) {
          if (element.className === 'collapsible') {
            MakeContentVisible(element, true);
          }
        }, 0);
      }

      function MakeContentVisible(element, visible) {
        let img = element.previousSibling.firstChild;
        if (!!img.tagName && img.tagName.toLowerCase() === "img") {
          element.style.display = visible ? 'inline' : 'none';
          element.previousSibling.firstChild.src = visible ? window.ImgExpanded : window.ImgCollapsed;
        }
      }

      function TraverseChildren(element, func, depth) {
        for (let i = 0; i < element.childNodes.length; i++) {
          TraverseChildren(element.childNodes[i], func, depth + 1);
        }
        func(element, depth);
      }

      function ExpImgClicked(img) {
        let container = img.parentNode.nextSibling;
        if (!container) return;
        let disp = "none";
        let src = window.ImgCollapsed;
        if (container.style.display === "none") {
          disp = "inline";
          src = window.ImgExpanded;
        }
        container.style.display = disp;
        img.src = src;
      }

      function CollapseLevel(level) {
        EnsureIsPopulated();
        TraverseChildren($id("Canvas"), function (element, depth) {
          if (element.className === 'collapsible') {
            if (depth >= level) {
              MakeContentVisible(element, false);
            } else {
              MakeContentVisible(element, true);
            }
          }
        }, 0);
      }

      function TabSizeChanged() {
        Process();
      }

      function SetTab() {
        let select = $id("TabSize");
        window.TAB = MultiplyString(parseInt(select.options[select.selectedIndex].value), window.SINGLE_TAB);
      }

      function EnsureIsPopulated() {
        if (!$id("Canvas").innerHTML && !!$id("RawJson").value) Process();
      }

      function MultiplyString(num, str) {
        let sb = [];
        for (let i = 0; i < num; i++) {
          sb.push(str);
        }
        return sb.join("");
      }

      function SelectAllClicked() {
        if (!!document.selection && !!document.selection.empty) {
          document.selection.empty();
        } else if (window.getSelection) {
          let sel = window.getSelection();
          if (sel.removeAllRanges) {
            window.getSelection().removeAllRanges();
          }
        }
        let range = (!!document.body && !!document.body.createTextRange)
          ? document.body.createTextRange()
          : document.createRange();
        if (!!range.selectNode)
          range.selectNode($id("Canvas"));
        else if (range.moveToElementText)
          range.moveToElementText($id("Canvas"));
        if (!!range.select)
          range.select($id("Canvas"));
        else
          window.getSelection().addRange(range);
      }

      function LinkToJson() {
        let val = $id("RawJson").value;
        val = escape(val.split('/n').join(' ').split('/r').join(' '));
        $id("InvisibleLinkUrl").value = val;
        $id("InvisibleLink").submit();
      }
    </script>

</head>

<body>
<div class="HeadersRow">
    <h3 id="HeaderSubTitle">JSON格式化及高亮:</h3>
    <textarea id="RawJson" spellcheck="false"></textarea>
</div>
<div id="ControlsRow" style="margin-top:10px">
    <button onclick="Process()">格式化</button>
    <span id="TabSizeHolder">缩进量
            <select id="TabSize" onchange="TabSizeChanged()">
              <option value="1">1</option>
              <option value="2" selected="true">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
            </select>
          </span>
    <button onclick="SelectAllClicked()" style="margin-top:10px">全选</button>
    <div style="margin-top:10px">
        <label for="QuoteKeys" style="margin-left:10px">
            <input type="checkbox" id="QuoteKeys" onclick="QuoteKeysClicked()" checked="true"/>引号</label>&nbsp;
        <span id="CollapsibleViewHolder">
            <label for="CollapsibleView">
              <input type="checkbox" id="CollapsibleView" onclick="CollapsibleViewClicked()" checked="true"/>显示控制
            </label>
          </span>
        <span id="CollapsibleViewDetail">
            <button onclick="ExpandAllClicked()">展开</button>
            <button onclick="CollapseAllClicked()">叠起</button>
            <button onclick="CollapseLevel(3)">2级</button>
            <button onclick="CollapseLevel(4)">3级</button>
            <button onclick="CollapseLevel(5)">4级</button>
            <button onclick="CollapseLevel(6)">5级</button>
            <button onclick="CollapseLevel(7)">6级</button>
            <button onclick="CollapseLevel(8)">7级</button>
            <button onclick="CollapseLevel(9)">8级</button>
        </span>
    </div>
</div>
<div id="Canvas" class="Canvas"></div>
</body>
